describe('rockPaperScissors', function() {
  it('should be defined', function() {
    should.exist(rockPaperScissors);
  });
  it('should be a function', function() {
    rockPaperScissors.should.be.a.Function;
  });
  it('should return an array', function() {
    rockPaperScissors().should.be.an.instanceOf(Array);
  });
  it('should return an array of strings', function() {
    should.exist(rockPaperScissors()[0]);
    rockPaperScissors()[0].should.be.a.String;
  });
  it('should contain every throw', function() {
    var expected = [
      'RRR', 'RRP',
      'RRS', 'RPR',
      'RPP', 'RPS',
      'RSR', 'RSP',
      'RSS', 'PRR',
      'PRP', 'PRS',
      'PPR', 'PPP',
      'PPS', 'PSR',
      'PSP', 'PSS',
      'SRR', 'SRP',
      'SRS', 'SPR',
      'SPP', 'SPS',
      'SSR', 'SSP',
      'SSS'
    ];
    var result = rockPaperScissors();
    result.length.should.equal(expected.length);
    expect(result).to.have.members(expected);
  });
  describe('EXTRA CREDIT', function () {
    it('should return results for rockPaperScissors(2)', function() {
      var expected = [
        'RR',
        'RP',
        'RS',
        'PR',
        'PP',
        'PS',
        'SR',
        'SP',
        'SS'
      ];
      var result = rockPaperScissors(2);
      result.length.should.equal(expected.length);
      expect(result).to.have.members(expected);
    });
    it('should return results for rockPaperScissors(1)', function() {
      var expected = [ 'R', 'P', 'S' ];
      var result = rockPaperScissors(1);
      result.length.should.equal(expected.length);
      expect(result).to.have.members(expected);
    });
    it('should return results for rockPaperScissors(5)', function () {
      var expected = expectedOutputForRockPaperScissorsOf5(); // eslint-disable-line no-use-before-define
      var result = rockPaperScissors(5);
      result.length.should.equal(expected.length);
      expect(result).to.have.members(expected);
    });
  });
});

var expectedOutputForRockPaperScissorsOf5 = function () {
  return [ 
    'RRRRR',
    'RRRRP',
    'RRRRS',
    'RRRPR',
    'RRRPP',
    'RRRPS',
    'RRRSR',
    'RRRSP',
    'RRRSS',
    'RRPRR',
    'RRPRP',
    'RRPRS',
    'RRPPR',
    'RRPPP',
    'RRPPS',
    'RRPSR',
    'RRPSP',
    'RRPSS',
    'RRSRR',
    'RRSRP',
    'RRSRS',
    'RRSPR',
    'RRSPP',
    'RRSPS',
    'RRSSR',
    'RRSSP',
    'RRSSS',
    'RPRRR',
    'RPRRP',
    'RPRRS',
    'RPRPR',
    'RPRPP',
    'RPRPS',
    'RPRSR',
    'RPRSP',
    'RPRSS',
    'RPPRR',
    'RPPRP',
    'RPPRS',
    'RPPPR',
    'RPPPP',
    'RPPPS',
    'RPPSR',
    'RPPSP',
    'RPPSS',
    'RPSRR',
    'RPSRP',
    'RPSRS',
    'RPSPR',
    'RPSPP',
    'RPSPS',
    'RPSSR',
    'RPSSP',
    'RPSSS',
    'RSRRR',
    'RSRRP',
    'RSRRS',
    'RSRPR',
    'RSRPP',
    'RSRPS',
    'RSRSR',
    'RSRSP',
    'RSRSS',
    'RSPRR',
    'RSPRP',
    'RSPRS',
    'RSPPR',
    'RSPPP',
    'RSPPS',
    'RSPSR',
    'RSPSP',
    'RSPSS',
    'RSSRR',
    'RSSRP',
    'RSSRS',
    'RSSPR',
    'RSSPP',
    'RSSPS',
    'RSSSR',
    'RSSSP',
    'RSSSS',
    'PRRRR',
    'PRRRP',
    'PRRRS',
    'PRRPR',
    'PRRPP',
    'PRRPS',
    'PRRSR',
    'PRRSP',
    'PRRSS',
    'PRPRR',
    'PRPRP',
    'PRPRS',
    'PRPPR',
    'PRPPP',
    'PRPPS',
    'PRPSR',
    'PRPSP',
    'PRPSS',
    'PRSRR',
    'PRSRP',
    'PRSRS',
    'PRSPR',
    'PRSPP',
    'PRSPS',
    'PRSSR',
    'PRSSP',
    'PRSSS',
    'PPRRR',
    'PPRRP',
    'PPRRS',
    'PPRPR',
    'PPRPP',
    'PPRPS',
    'PPRSR',
    'PPRSP',
    'PPRSS',
    'PPPRR',
    'PPPRP',
    'PPPRS',
    'PPPPR',
    'PPPPP',
    'PPPPS',
    'PPPSR',
    'PPPSP',
    'PPPSS',
    'PPSRR',
    'PPSRP',
    'PPSRS',
    'PPSPR',
    'PPSPP',
    'PPSPS',
    'PPSSR',
    'PPSSP',
    'PPSSS',
    'PSRRR',
    'PSRRP',
    'PSRRS',
    'PSRPR',
    'PSRPP',
    'PSRPS',
    'PSRSR',
    'PSRSP',
    'PSRSS',
    'PSPRR',
    'PSPRP',
    'PSPRS',
    'PSPPR',
    'PSPPP',
    'PSPPS',
    'PSPSR',
    'PSPSP',
    'PSPSS',
    'PSSRR',
    'PSSRP',
    'PSSRS',
    'PSSPR',
    'PSSPP',
    'PSSPS',
    'PSSSR',
    'PSSSP',
    'PSSSS',
    'SRRRR',
    'SRRRP',
    'SRRRS',
    'SRRPR',
    'SRRPP',
    'SRRPS',
    'SRRSR',
    'SRRSP',
    'SRRSS',
    'SRPRR',
    'SRPRP',
    'SRPRS',
    'SRPPR',
    'SRPPP',
    'SRPPS',
    'SRPSR',
    'SRPSP',
    'SRPSS',
    'SRSRR',
    'SRSRP',
    'SRSRS',
    'SRSPR',
    'SRSPP',
    'SRSPS',
    'SRSSR',
    'SRSSP',
    'SRSSS',
    'SPRRR',
    'SPRRP',
    'SPRRS',
    'SPRPR',
    'SPRPP',
    'SPRPS',
    'SPRSR',
    'SPRSP',
    'SPRSS',
    'SPPRR',
    'SPPRP',
    'SPPRS',
    'SPPPR',
    'SPPPP',
    'SPPPS',
    'SPPSR',
    'SPPSP',
    'SPPSS',
    'SPSRR',
    'SPSRP',
    'SPSRS',
    'SPSPR',
    'SPSPP',
    'SPSPS',
    'SPSSR',
    'SPSSP',
    'SPSSS',
    'SSRRR',
    'SSRRP',
    'SSRRS',
    'SSRPR',
    'SSRPP',
    'SSRPS',
    'SSRSR',
    'SSRSP',
    'SSRSS',
    'SSPRR',
    'SSPRP',
    'SSPRS',
    'SSPPR',
    'SSPPP',
    'SSPPS',
    'SSPSR',
    'SSPSP',
    'SSPSS',
    'SSSRR',
    'SSSRP',
    'SSSRS',
    'SSSPR',
    'SSSPP',
    'SSSPS',
    'SSSSR',
    'SSSSP',
    'SSSSS'
  ];
};
